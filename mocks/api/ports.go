// Code generated by MockGen. DO NOT EDIT.
// Source: app/api/ports.go
//
// Generated by this command:
//
//	mockgen -destination mocks/api/ports.go -source=app/api/ports.go GetLocalhostsUseCase
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	host "github.com/PaoGRodrigues/tfi-backend/app/domain/host"
	gomock "go.uber.org/mock/gomock"
)

// MockGetLocalhostsUseCase is a mock of GetLocalhostsUseCase interface.
type MockGetLocalhostsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetLocalhostsUseCaseMockRecorder
	isgomock struct{}
}

// MockGetLocalhostsUseCaseMockRecorder is the mock recorder for MockGetLocalhostsUseCase.
type MockGetLocalhostsUseCaseMockRecorder struct {
	mock *MockGetLocalhostsUseCase
}

// NewMockGetLocalhostsUseCase creates a new mock instance.
func NewMockGetLocalhostsUseCase(ctrl *gomock.Controller) *MockGetLocalhostsUseCase {
	mock := &MockGetLocalhostsUseCase{ctrl: ctrl}
	mock.recorder = &MockGetLocalhostsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetLocalhostsUseCase) EXPECT() *MockGetLocalhostsUseCaseMockRecorder {
	return m.recorder
}

// GetLocalHosts mocks base method.
func (m *MockGetLocalhostsUseCase) GetLocalHosts() ([]host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalHosts")
	ret0, _ := ret[0].([]host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalHosts indicates an expected call of GetLocalHosts.
func (mr *MockGetLocalhostsUseCaseMockRecorder) GetLocalHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalHosts", reflect.TypeOf((*MockGetLocalhostsUseCase)(nil).GetLocalHosts))
}
