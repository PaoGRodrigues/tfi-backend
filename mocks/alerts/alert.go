// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/alert/model_temp.go
//
// Generated by this command:
//
//	mockgen -destination mocks/alerts/alert.go -source=app/domain/alert/model_temp.go Notifier,AlertsSender
//

// Package mock_alert is a generated GoMock package.
package mock_alert

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAlertsSender is a mock of AlertsSender interface.
type MockAlertsSender struct {
	ctrl     *gomock.Controller
	recorder *MockAlertsSenderMockRecorder
	isgomock struct{}
}

// MockAlertsSenderMockRecorder is the mock recorder for MockAlertsSender.
type MockAlertsSenderMockRecorder struct {
	mock *MockAlertsSender
}

// NewMockAlertsSender creates a new mock instance.
func NewMockAlertsSender(ctrl *gomock.Controller) *MockAlertsSender {
	mock := &MockAlertsSender{ctrl: ctrl}
	mock.recorder = &MockAlertsSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertsSender) EXPECT() *MockAlertsSenderMockRecorder {
	return m.recorder
}

// SendLastAlertMessages mocks base method.
func (m *MockAlertsSender) SendLastAlertMessages() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLastAlertMessages")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLastAlertMessages indicates an expected call of SendLastAlertMessages.
func (mr *MockAlertsSenderMockRecorder) SendLastAlertMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLastAlertMessages", reflect.TypeOf((*MockAlertsSender)(nil).SendLastAlertMessages))
}

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
	isgomock struct{}
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockNotifier) SendMessage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockNotifierMockRecorder) SendMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockNotifier)(nil).SendMessage), arg0)
}
