// Code generated by MockGen. DO NOT EDIT.
// Source: app/ports/traffic/reader.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports/traffic/reader.go -source=app/ports/traffic/reader.go TrafficReader
//

// Package mock_traffic is a generated GoMock package.
package mock_traffic

import (
	reflect "reflect"

	traffic "github.com/PaoGRodrigues/tfi-backend/app/domain/traffic"
	gomock "go.uber.org/mock/gomock"
)

// MockTrafficReader is a mock of TrafficReader interface.
type MockTrafficReader struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficReaderMockRecorder
	isgomock struct{}
}

// MockTrafficReaderMockRecorder is the mock recorder for MockTrafficReader.
type MockTrafficReaderMockRecorder struct {
	mock *MockTrafficReader
}

// NewMockTrafficReader creates a new mock instance.
func NewMockTrafficReader(ctrl *gomock.Controller) *MockTrafficReader {
	mock := &MockTrafficReader{ctrl: ctrl}
	mock.recorder = &MockTrafficReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficReader) EXPECT() *MockTrafficReaderMockRecorder {
	return m.recorder
}

// GetActiveFlows mocks base method.
func (m *MockTrafficReader) GetActiveFlows() []traffic.TrafficFlow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveFlows")
	ret0, _ := ret[0].([]traffic.TrafficFlow)
	return ret0
}

// GetActiveFlows indicates an expected call of GetActiveFlows.
func (mr *MockTrafficReaderMockRecorder) GetActiveFlows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveFlows", reflect.TypeOf((*MockTrafficReader)(nil).GetActiveFlows))
}

// GetTrafficFlows mocks base method.
func (m *MockTrafficReader) GetTrafficFlows() ([]traffic.TrafficFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficFlows")
	ret0, _ := ret[0].([]traffic.TrafficFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficFlows indicates an expected call of GetTrafficFlows.
func (mr *MockTrafficReaderMockRecorder) GetTrafficFlows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficFlows", reflect.TypeOf((*MockTrafficReader)(nil).GetTrafficFlows))
}
