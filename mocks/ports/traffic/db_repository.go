// Code generated by MockGen. DO NOT EDIT.
// Source: app/ports/traffic/db_repository.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports/traffic/db_repository.go -source=app/ports/traffic/db_repository.go TrafficDBRepository
//

// Package mock_traffic is a generated GoMock package.
package mock_traffic

import (
	reflect "reflect"

	traffic "github.com/PaoGRodrigues/tfi-backend/app/domain/traffic"
	gomock "go.uber.org/mock/gomock"
)

// MockTrafficDBRepository is a mock of TrafficDBRepository interface.
type MockTrafficDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficDBRepositoryMockRecorder
	isgomock struct{}
}

// MockTrafficDBRepositoryMockRecorder is the mock recorder for MockTrafficDBRepository.
type MockTrafficDBRepositoryMockRecorder struct {
	mock *MockTrafficDBRepository
}

// NewMockTrafficDBRepository creates a new mock instance.
func NewMockTrafficDBRepository(ctrl *gomock.Controller) *MockTrafficDBRepository {
	mock := &MockTrafficDBRepository{ctrl: ctrl}
	mock.recorder = &MockTrafficDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficDBRepository) EXPECT() *MockTrafficDBRepositoryMockRecorder {
	return m.recorder
}

// GetClients mocks base method.
func (m *MockTrafficDBRepository) GetClients() ([]traffic.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients")
	ret0, _ := ret[0].([]traffic.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockTrafficDBRepositoryMockRecorder) GetClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockTrafficDBRepository)(nil).GetClients))
}

// GetFlowByKey mocks base method.
func (m *MockTrafficDBRepository) GetFlowByKey(arg0 string) (traffic.TrafficFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowByKey", arg0)
	ret0, _ := ret[0].(traffic.TrafficFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowByKey indicates an expected call of GetFlowByKey.
func (mr *MockTrafficDBRepositoryMockRecorder) GetFlowByKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowByKey", reflect.TypeOf((*MockTrafficDBRepository)(nil).GetFlowByKey), arg0)
}

// GetServerByAttr mocks base method.
func (m *MockTrafficDBRepository) GetServerByAttr(arg0 string) (traffic.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerByAttr", arg0)
	ret0, _ := ret[0].(traffic.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerByAttr indicates an expected call of GetServerByAttr.
func (mr *MockTrafficDBRepositoryMockRecorder) GetServerByAttr(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerByAttr", reflect.TypeOf((*MockTrafficDBRepository)(nil).GetServerByAttr), arg0)
}

// GetServers mocks base method.
func (m *MockTrafficDBRepository) GetServers() ([]traffic.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers")
	ret0, _ := ret[0].([]traffic.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServers indicates an expected call of GetServers.
func (mr *MockTrafficDBRepositoryMockRecorder) GetServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockTrafficDBRepository)(nil).GetServers))
}

// StoreTrafficFlows mocks base method.
func (m *MockTrafficDBRepository) StoreTrafficFlows(arg0 []traffic.TrafficFlow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTrafficFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTrafficFlows indicates an expected call of StoreTrafficFlows.
func (mr *MockTrafficDBRepositoryMockRecorder) StoreTrafficFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTrafficFlows", reflect.TypeOf((*MockTrafficDBRepository)(nil).StoreTrafficFlows), arg0)
}
