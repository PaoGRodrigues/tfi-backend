// Code generated by MockGen. DO NOT EDIT.
// Source: app/ports/host/repository.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports/host/repository.go -source=app/ports/host/repository.go HostRepository
//

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	host "github.com/PaoGRodrigues/tfi-backend/app/domain/host"
	gomock "go.uber.org/mock/gomock"
)

// MockHostRepository is a mock of HostRepository interface.
type MockHostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHostRepositoryMockRecorder
	isgomock struct{}
}

// MockHostRepositoryMockRecorder is the mock recorder for MockHostRepository.
type MockHostRepositoryMockRecorder struct {
	mock *MockHostRepository
}

// NewMockHostRepository creates a new mock instance.
func NewMockHostRepository(ctrl *gomock.Controller) *MockHostRepository {
	mock := &MockHostRepository{ctrl: ctrl}
	mock.recorder = &MockHostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostRepository) EXPECT() *MockHostRepositoryMockRecorder {
	return m.recorder
}

// GetAllHosts mocks base method.
func (m *MockHostRepository) GetAllHosts() ([]host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHosts")
	ret0, _ := ret[0].([]host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHosts indicates an expected call of GetAllHosts.
func (mr *MockHostRepositoryMockRecorder) GetAllHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHosts", reflect.TypeOf((*MockHostRepository)(nil).GetAllHosts))
}
