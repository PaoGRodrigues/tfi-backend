// Code generated by MockGen. DO NOT EDIT.
// Source: app/ports/host/db_repository.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports/host/db_repository.go -source=app/ports/host/db_repository.go HostDBRepository
//

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	host "github.com/PaoGRodrigues/tfi-backend/app/domain/host"
	gomock "go.uber.org/mock/gomock"
)

// MockHostDBRepository is a mock of HostDBRepository interface.
type MockHostDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHostDBRepositoryMockRecorder
	isgomock struct{}
}

// MockHostDBRepositoryMockRecorder is the mock recorder for MockHostDBRepository.
type MockHostDBRepositoryMockRecorder struct {
	mock *MockHostDBRepository
}

// NewMockHostDBRepository creates a new mock instance.
func NewMockHostDBRepository(ctrl *gomock.Controller) *MockHostDBRepository {
	mock := &MockHostDBRepository{ctrl: ctrl}
	mock.recorder = &MockHostDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostDBRepository) EXPECT() *MockHostDBRepositoryMockRecorder {
	return m.recorder
}

// GetHostByIp mocks base method.
func (m *MockHostDBRepository) GetHostByIp(arg0 string) (host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByIp", arg0)
	ret0, _ := ret[0].(host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByIp indicates an expected call of GetHostByIp.
func (mr *MockHostDBRepositoryMockRecorder) GetHostByIp(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByIp", reflect.TypeOf((*MockHostDBRepository)(nil).GetHostByIp), arg0)
}

// StoreHosts mocks base method.
func (m *MockHostDBRepository) StoreHosts(arg0 []host.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreHosts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreHosts indicates an expected call of StoreHosts.
func (mr *MockHostDBRepositoryMockRecorder) StoreHosts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreHosts", reflect.TypeOf((*MockHostDBRepository)(nil).StoreHosts), arg0)
}
