// Code generated by MockGen. DO NOT EDIT.
// Source: app/ports/host/blocker.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports/host/blocker.go -source=app/ports/host/blocker.go HostBlocker
//

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHostBlocker is a mock of HostBlocker interface.
type MockHostBlocker struct {
	ctrl     *gomock.Controller
	recorder *MockHostBlockerMockRecorder
	isgomock struct{}
}

// MockHostBlockerMockRecorder is the mock recorder for MockHostBlocker.
type MockHostBlockerMockRecorder struct {
	mock *MockHostBlocker
}

// NewMockHostBlocker creates a new mock instance.
func NewMockHostBlocker(ctrl *gomock.Controller) *MockHostBlocker {
	mock := &MockHostBlocker{ctrl: ctrl}
	mock.recorder = &MockHostBlockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostBlocker) EXPECT() *MockHostBlockerMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockHostBlocker) Block(arg0 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockHostBlockerMockRecorder) Block(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockHostBlocker)(nil).Block), arg0)
}
