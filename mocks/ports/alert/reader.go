// Code generated by MockGen. DO NOT EDIT.
// Source: app/ports/alert/reader.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports/alert/reader.go -source=app/ports/alert/reader.go AlertReader
//

// Package mock_alert is a generated GoMock package.
package mock_alert

import (
	reflect "reflect"

	alert "github.com/PaoGRodrigues/tfi-backend/app/domain/alert"
	gomock "go.uber.org/mock/gomock"
)

// MockAlertReader is a mock of AlertReader interface.
type MockAlertReader struct {
	ctrl     *gomock.Controller
	recorder *MockAlertReaderMockRecorder
	isgomock struct{}
}

// MockAlertReaderMockRecorder is the mock recorder for MockAlertReader.
type MockAlertReaderMockRecorder struct {
	mock *MockAlertReader
}

// NewMockAlertReader creates a new mock instance.
func NewMockAlertReader(ctrl *gomock.Controller) *MockAlertReader {
	mock := &MockAlertReader{ctrl: ctrl}
	mock.recorder = &MockAlertReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertReader) EXPECT() *MockAlertReaderMockRecorder {
	return m.recorder
}

// GetAllAlerts mocks base method.
func (m *MockAlertReader) GetAllAlerts(arg0, arg1 int) ([]alert.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlerts", arg0, arg1)
	ret0, _ := ret[0].([]alert.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlerts indicates an expected call of GetAllAlerts.
func (mr *MockAlertReaderMockRecorder) GetAllAlerts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlerts", reflect.TypeOf((*MockAlertReader)(nil).GetAllAlerts), arg0, arg1)
}
