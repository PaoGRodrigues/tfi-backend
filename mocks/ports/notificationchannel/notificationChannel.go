// Code generated by MockGen. DO NOT EDIT.
// Source: app/ports/notificationchannel/channel.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports/notificationchannel/notificationChannel.go -source=app/ports/notificationchannel/channel.go NotificationChannel
//

// Package mock_notificationchannel is a generated GoMock package.
package mock_notificationchannel

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotificationChannel is a mock of NotificationChannel interface.
type MockNotificationChannel struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationChannelMockRecorder
	isgomock struct{}
}

// MockNotificationChannelMockRecorder is the mock recorder for MockNotificationChannel.
type MockNotificationChannelMockRecorder struct {
	mock *MockNotificationChannel
}

// NewMockNotificationChannel creates a new mock instance.
func NewMockNotificationChannel(ctrl *gomock.Controller) *MockNotificationChannel {
	mock := &MockNotificationChannel{ctrl: ctrl}
	mock.recorder = &MockNotificationChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationChannel) EXPECT() *MockNotificationChannelMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockNotificationChannel) Configure(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockNotificationChannelMockRecorder) Configure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockNotificationChannel)(nil).Configure), arg0, arg1)
}
