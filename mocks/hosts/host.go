// Code generated by MockGen. DO NOT EDIT.
// Source: app/hosts/domains/host.go

// Package mock_domains is a generated GoMock package.
package mock_domains

import (
	reflect "reflect"

	domains "github.com/PaoGRodrigues/tfi-backend/app/hosts/domains"
	gomock "github.com/golang/mock/gomock"
)

// MockHostUseCase is a mock of HostUseCase interface.
type MockHostUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockHostUseCaseMockRecorder
}

// MockHostUseCaseMockRecorder is the mock recorder for MockHostUseCase.
type MockHostUseCaseMockRecorder struct {
	mock *MockHostUseCase
}

// NewMockHostUseCase creates a new mock instance.
func NewMockHostUseCase(ctrl *gomock.Controller) *MockHostUseCase {
	mock := &MockHostUseCase{ctrl: ctrl}
	mock.recorder = &MockHostUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostUseCase) EXPECT() *MockHostUseCaseMockRecorder {
	return m.recorder
}

// GetAllHosts mocks base method.
func (m *MockHostUseCase) GetAllHosts() ([]domains.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHosts")
	ret0, _ := ret[0].([]domains.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHosts indicates an expected call of GetAllHosts.
func (mr *MockHostUseCaseMockRecorder) GetAllHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHosts", reflect.TypeOf((*MockHostUseCase)(nil).GetAllHosts))
}

// GetHosts mocks base method.
func (m *MockHostUseCase) GetHosts() []domains.Host {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHosts")
	ret0, _ := ret[0].([]domains.Host)
	return ret0
}

// GetHosts indicates an expected call of GetHosts.
func (mr *MockHostUseCaseMockRecorder) GetHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHosts", reflect.TypeOf((*MockHostUseCase)(nil).GetHosts))
}

// MockHostsFilter is a mock of HostsFilter interface.
type MockHostsFilter struct {
	ctrl     *gomock.Controller
	recorder *MockHostsFilterMockRecorder
}

// MockHostsFilterMockRecorder is the mock recorder for MockHostsFilter.
type MockHostsFilterMockRecorder struct {
	mock *MockHostsFilter
}

// NewMockHostsFilter creates a new mock instance.
func NewMockHostsFilter(ctrl *gomock.Controller) *MockHostsFilter {
	mock := &MockHostsFilter{ctrl: ctrl}
	mock.recorder = &MockHostsFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostsFilter) EXPECT() *MockHostsFilterMockRecorder {
	return m.recorder
}

// GetHost mocks base method.
func (m *MockHostsFilter) GetHost(arg0 string) (domains.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", arg0)
	ret0, _ := ret[0].(domains.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost.
func (mr *MockHostsFilterMockRecorder) GetHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockHostsFilter)(nil).GetHost), arg0)
}

// GetLocalHosts mocks base method.
func (m *MockHostsFilter) GetLocalHosts() ([]domains.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalHosts")
	ret0, _ := ret[0].([]domains.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalHosts indicates an expected call of GetLocalHosts.
func (mr *MockHostsFilterMockRecorder) GetLocalHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalHosts", reflect.TypeOf((*MockHostsFilter)(nil).GetLocalHosts))
}

// GetRemoteHosts mocks base method.
func (m *MockHostsFilter) GetRemoteHosts() ([]domains.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteHosts")
	ret0, _ := ret[0].([]domains.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteHosts indicates an expected call of GetRemoteHosts.
func (mr *MockHostsFilterMockRecorder) GetRemoteHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteHosts", reflect.TypeOf((*MockHostsFilter)(nil).GetRemoteHosts))
}

// MockHostBlocker is a mock of HostBlocker interface.
type MockHostBlocker struct {
	ctrl     *gomock.Controller
	recorder *MockHostBlockerMockRecorder
}

// MockHostBlockerMockRecorder is the mock recorder for MockHostBlocker.
type MockHostBlockerMockRecorder struct {
	mock *MockHostBlocker
}

// NewMockHostBlocker creates a new mock instance.
func NewMockHostBlocker(ctrl *gomock.Controller) *MockHostBlocker {
	mock := &MockHostBlocker{ctrl: ctrl}
	mock.recorder = &MockHostBlockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostBlocker) EXPECT() *MockHostBlockerMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockHostBlocker) Block(arg0 string) (domains.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", arg0)
	ret0, _ := ret[0].(domains.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockHostBlockerMockRecorder) Block(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockHostBlocker)(nil).Block), arg0)
}

// MockHostService is a mock of HostService interface.
type MockHostService struct {
	ctrl     *gomock.Controller
	recorder *MockHostServiceMockRecorder
}

// MockHostServiceMockRecorder is the mock recorder for MockHostService.
type MockHostServiceMockRecorder struct {
	mock *MockHostService
}

// NewMockHostService creates a new mock instance.
func NewMockHostService(ctrl *gomock.Controller) *MockHostService {
	mock := &MockHostService{ctrl: ctrl}
	mock.recorder = &MockHostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostService) EXPECT() *MockHostServiceMockRecorder {
	return m.recorder
}

// GetAllHosts mocks base method.
func (m *MockHostService) GetAllHosts() ([]domains.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHosts")
	ret0, _ := ret[0].([]domains.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHosts indicates an expected call of GetAllHosts.
func (mr *MockHostServiceMockRecorder) GetAllHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHosts", reflect.TypeOf((*MockHostService)(nil).GetAllHosts))
}

// MockHostBlockService is a mock of HostBlockService interface.
type MockHostBlockService struct {
	ctrl     *gomock.Controller
	recorder *MockHostBlockServiceMockRecorder
}

// MockHostBlockServiceMockRecorder is the mock recorder for MockHostBlockService.
type MockHostBlockServiceMockRecorder struct {
	mock *MockHostBlockService
}

// NewMockHostBlockService creates a new mock instance.
func NewMockHostBlockService(ctrl *gomock.Controller) *MockHostBlockService {
	mock := &MockHostBlockService{ctrl: ctrl}
	mock.recorder = &MockHostBlockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostBlockService) EXPECT() *MockHostBlockServiceMockRecorder {
	return m.recorder
}

// BlockHost mocks base method.
func (m *MockHostBlockService) BlockHost(arg0 domains.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockHost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockHost indicates an expected call of BlockHost.
func (mr *MockHostBlockServiceMockRecorder) BlockHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockHost", reflect.TypeOf((*MockHostBlockService)(nil).BlockHost), arg0)
}
