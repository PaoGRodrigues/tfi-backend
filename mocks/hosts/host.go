// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/host/models_temp.go
//
// Generated by this command:
//
//	mockgen -destination mocks/hosts/host.go -source=app/domain/host/models_temp.go HostService,HostsStorage,HostsRepository
//

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	host "github.com/PaoGRodrigues/tfi-backend/app/domain/host"
	gomock "go.uber.org/mock/gomock"
)

// MockHostsStorage is a mock of HostsStorage interface.
type MockHostsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockHostsStorageMockRecorder
	isgomock struct{}
}

// MockHostsStorageMockRecorder is the mock recorder for MockHostsStorage.
type MockHostsStorageMockRecorder struct {
	mock *MockHostsStorage
}

// NewMockHostsStorage creates a new mock instance.
func NewMockHostsStorage(ctrl *gomock.Controller) *MockHostsStorage {
	mock := &MockHostsStorage{ctrl: ctrl}
	mock.recorder = &MockHostsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostsStorage) EXPECT() *MockHostsStorageMockRecorder {
	return m.recorder
}

// GetHostByIp mocks base method.
func (m *MockHostsStorage) GetHostByIp(arg0 string) (host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByIp", arg0)
	ret0, _ := ret[0].(host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByIp indicates an expected call of GetHostByIp.
func (mr *MockHostsStorageMockRecorder) GetHostByIp(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByIp", reflect.TypeOf((*MockHostsStorage)(nil).GetHostByIp), arg0)
}

// StoreHosts mocks base method.
func (m *MockHostsStorage) StoreHosts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreHosts")
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreHosts indicates an expected call of StoreHosts.
func (mr *MockHostsStorageMockRecorder) StoreHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreHosts", reflect.TypeOf((*MockHostsStorage)(nil).StoreHosts))
}

// MockHostService is a mock of HostService interface.
type MockHostService struct {
	ctrl     *gomock.Controller
	recorder *MockHostServiceMockRecorder
	isgomock struct{}
}

// MockHostServiceMockRecorder is the mock recorder for MockHostService.
type MockHostServiceMockRecorder struct {
	mock *MockHostService
}

// NewMockHostService creates a new mock instance.
func NewMockHostService(ctrl *gomock.Controller) *MockHostService {
	mock := &MockHostService{ctrl: ctrl}
	mock.recorder = &MockHostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostService) EXPECT() *MockHostServiceMockRecorder {
	return m.recorder
}

// GetAllHosts mocks base method.
func (m *MockHostService) GetAllHosts() ([]host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHosts")
	ret0, _ := ret[0].([]host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHosts indicates an expected call of GetAllHosts.
func (mr *MockHostServiceMockRecorder) GetAllHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHosts", reflect.TypeOf((*MockHostService)(nil).GetAllHosts))
}

// MockHostBlockerService is a mock of HostBlockerService interface.
type MockHostBlockerService struct {
	ctrl     *gomock.Controller
	recorder *MockHostBlockerServiceMockRecorder
	isgomock struct{}
}

// MockHostBlockerServiceMockRecorder is the mock recorder for MockHostBlockerService.
type MockHostBlockerServiceMockRecorder struct {
	mock *MockHostBlockerService
}

// NewMockHostBlockerService creates a new mock instance.
func NewMockHostBlockerService(ctrl *gomock.Controller) *MockHostBlockerService {
	mock := &MockHostBlockerService{ctrl: ctrl}
	mock.recorder = &MockHostBlockerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostBlockerService) EXPECT() *MockHostBlockerServiceMockRecorder {
	return m.recorder
}

// BlockHost mocks base method.
func (m *MockHostBlockerService) BlockHost(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockHost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockHost indicates an expected call of BlockHost.
func (mr *MockHostBlockerServiceMockRecorder) BlockHost(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockHost", reflect.TypeOf((*MockHostBlockerService)(nil).BlockHost), arg0)
}

// MockHostsRepository is a mock of HostsRepository interface.
type MockHostsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHostsRepositoryMockRecorder
	isgomock struct{}
}

// MockHostsRepositoryMockRecorder is the mock recorder for MockHostsRepository.
type MockHostsRepositoryMockRecorder struct {
	mock *MockHostsRepository
}

// NewMockHostsRepository creates a new mock instance.
func NewMockHostsRepository(ctrl *gomock.Controller) *MockHostsRepository {
	mock := &MockHostsRepository{ctrl: ctrl}
	mock.recorder = &MockHostsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostsRepository) EXPECT() *MockHostsRepositoryMockRecorder {
	return m.recorder
}

// GetHostByIp mocks base method.
func (m *MockHostsRepository) GetHostByIp(arg0 string) (host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByIp", arg0)
	ret0, _ := ret[0].(host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByIp indicates an expected call of GetHostByIp.
func (mr *MockHostsRepositoryMockRecorder) GetHostByIp(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByIp", reflect.TypeOf((*MockHostsRepository)(nil).GetHostByIp), arg0)
}

// StoreHosts mocks base method.
func (m *MockHostsRepository) StoreHosts(arg0 []host.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreHosts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreHosts indicates an expected call of StoreHosts.
func (mr *MockHostsRepositoryMockRecorder) StoreHosts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreHosts", reflect.TypeOf((*MockHostsRepository)(nil).StoreHosts), arg0)
}
