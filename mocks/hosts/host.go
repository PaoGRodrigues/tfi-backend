// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/host/models_temp.go
//
// Generated by this command:
//
//	mockgen -destination mocks/hosts/host.go -source=app/domain/host/models_temp.go HostsStorage,HostsRepository
//

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	host "github.com/PaoGRodrigues/tfi-backend/app/domain/host"
	gomock "go.uber.org/mock/gomock"
)

// MockHostsRepository is a mock of HostsRepository interface.
type MockHostsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHostsRepositoryMockRecorder
	isgomock struct{}
}

// MockHostsRepositoryMockRecorder is the mock recorder for MockHostsRepository.
type MockHostsRepositoryMockRecorder struct {
	mock *MockHostsRepository
}

// NewMockHostsRepository creates a new mock instance.
func NewMockHostsRepository(ctrl *gomock.Controller) *MockHostsRepository {
	mock := &MockHostsRepository{ctrl: ctrl}
	mock.recorder = &MockHostsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostsRepository) EXPECT() *MockHostsRepositoryMockRecorder {
	return m.recorder
}

// GetHostByIp mocks base method.
func (m *MockHostsRepository) GetHostByIp(arg0 string) (host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByIp", arg0)
	ret0, _ := ret[0].(host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByIp indicates an expected call of GetHostByIp.
func (mr *MockHostsRepositoryMockRecorder) GetHostByIp(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByIp", reflect.TypeOf((*MockHostsRepository)(nil).GetHostByIp), arg0)
}

// StoreHosts mocks base method.
func (m *MockHostsRepository) StoreHosts(arg0 []host.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreHosts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreHosts indicates an expected call of StoreHosts.
func (mr *MockHostsRepositoryMockRecorder) StoreHosts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreHosts", reflect.TypeOf((*MockHostsRepository)(nil).StoreHosts), arg0)
}
