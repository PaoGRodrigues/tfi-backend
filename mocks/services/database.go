// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/database_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	domains "github.com/PaoGRodrigues/tfi-backend/app/domain/traffic"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateTables mocks base method.
func (m *MockStorage) CreateTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTables indicates an expected call of CreateTables.
func (mr *MockStorageMockRecorder) CreateTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTables", reflect.TypeOf((*MockStorage)(nil).CreateTables))
}

// InsertActiveFlow mocks base method.
func (m *MockStorage) InsertActiveFlow(arg0 domains.TrafficFlow) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertActiveFlow", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertActiveFlow indicates an expected call of InsertActiveFlow.
func (mr *MockStorageMockRecorder) InsertActiveFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertActiveFlow", reflect.TypeOf((*MockStorage)(nil).InsertActiveFlow), arg0)
}

// InsertClient mocks base method.
func (m *MockStorage) InsertClient(arg0 domains.Client, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertClient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertClient indicates an expected call of InsertClient.
func (mr *MockStorageMockRecorder) InsertClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertClient", reflect.TypeOf((*MockStorage)(nil).InsertClient), arg0, arg1)
}

// InsertProtocol mocks base method.
func (m *MockStorage) InsertProtocol(arg0 domains.Protocol, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProtocol", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProtocol indicates an expected call of InsertProtocol.
func (mr *MockStorageMockRecorder) InsertProtocol(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProtocol", reflect.TypeOf((*MockStorage)(nil).InsertProtocol), arg0, arg1)
}

// InsertServer mocks base method.
func (m *MockStorage) InsertServer(arg0 domains.Server, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertServer indicates an expected call of InsertServer.
func (mr *MockStorageMockRecorder) InsertServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertServer", reflect.TypeOf((*MockStorage)(nil).InsertServer), arg0, arg1)
}
