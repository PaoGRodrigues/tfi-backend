// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/domains.go
//
// Generated by this command:
//
//	mockgen -destination mocks/services/services.go -source=app/services/domains.go Tool,Terminal,NotificationChannel,Database
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	domains "github.com/PaoGRodrigues/tfi-backend/app/alerts/domains"
	host "github.com/PaoGRodrigues/tfi-backend/app/domain/host"
	domains0 "github.com/PaoGRodrigues/tfi-backend/app/traffic/domains"
	gomock "go.uber.org/mock/gomock"
)

// MockTool is a mock of Tool interface.
type MockTool struct {
	ctrl     *gomock.Controller
	recorder *MockToolMockRecorder
	isgomock struct{}
}

// MockToolMockRecorder is the mock recorder for MockTool.
type MockToolMockRecorder struct {
	mock *MockTool
}

// NewMockTool creates a new mock instance.
func NewMockTool(ctrl *gomock.Controller) *MockTool {
	mock := &MockTool{ctrl: ctrl}
	mock.recorder = &MockToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTool) EXPECT() *MockToolMockRecorder {
	return m.recorder
}

// EnableChecks mocks base method.
func (m *MockTool) EnableChecks() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableChecks")
}

// EnableChecks indicates an expected call of EnableChecks.
func (mr *MockToolMockRecorder) EnableChecks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableChecks", reflect.TypeOf((*MockTool)(nil).EnableChecks))
}

// GetAllActiveTraffic mocks base method.
func (m *MockTool) GetAllActiveTraffic() ([]domains0.ActiveFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveTraffic")
	ret0, _ := ret[0].([]domains0.ActiveFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveTraffic indicates an expected call of GetAllActiveTraffic.
func (mr *MockToolMockRecorder) GetAllActiveTraffic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveTraffic", reflect.TypeOf((*MockTool)(nil).GetAllActiveTraffic))
}

// GetAllAlerts mocks base method.
func (m *MockTool) GetAllAlerts(epoch_begin, epoch_end int) ([]domains.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlerts", epoch_begin, epoch_end)
	ret0, _ := ret[0].([]domains.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlerts indicates an expected call of GetAllAlerts.
func (mr *MockToolMockRecorder) GetAllAlerts(epoch_begin, epoch_end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlerts", reflect.TypeOf((*MockTool)(nil).GetAllAlerts), epoch_begin, epoch_end)
}

// GetAllHosts mocks base method.
func (m *MockTool) GetAllHosts() ([]host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHosts")
	ret0, _ := ret[0].([]host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHosts indicates an expected call of GetAllHosts.
func (mr *MockToolMockRecorder) GetAllHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHosts", reflect.TypeOf((*MockTool)(nil).GetAllHosts))
}

// SetInterfaceID mocks base method.
func (m *MockTool) SetInterfaceID() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInterfaceID")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInterfaceID indicates an expected call of SetInterfaceID.
func (mr *MockToolMockRecorder) SetInterfaceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInterfaceID", reflect.TypeOf((*MockTool)(nil).SetInterfaceID))
}

// MockTerminal is a mock of Terminal interface.
type MockTerminal struct {
	ctrl     *gomock.Controller
	recorder *MockTerminalMockRecorder
	isgomock struct{}
}

// MockTerminalMockRecorder is the mock recorder for MockTerminal.
type MockTerminalMockRecorder struct {
	mock *MockTerminal
}

// NewMockTerminal creates a new mock instance.
func NewMockTerminal(ctrl *gomock.Controller) *MockTerminal {
	mock := &MockTerminal{ctrl: ctrl}
	mock.recorder = &MockTerminalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerminal) EXPECT() *MockTerminalMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockTerminal) Block(arg0 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockTerminalMockRecorder) Block(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockTerminal)(nil).Block), arg0)
}

// MockNotificationChannel is a mock of NotificationChannel interface.
type MockNotificationChannel struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationChannelMockRecorder
	isgomock struct{}
}

// MockNotificationChannelMockRecorder is the mock recorder for MockNotificationChannel.
type MockNotificationChannelMockRecorder struct {
	mock *MockNotificationChannel
}

// NewMockNotificationChannel creates a new mock instance.
func NewMockNotificationChannel(ctrl *gomock.Controller) *MockNotificationChannel {
	mock := &MockNotificationChannel{ctrl: ctrl}
	mock.recorder = &MockNotificationChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationChannel) EXPECT() *MockNotificationChannelMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockNotificationChannel) Configure(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockNotificationChannelMockRecorder) Configure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockNotificationChannel)(nil).Configure), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockNotificationChannel) SendMessage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockNotificationChannelMockRecorder) SendMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockNotificationChannel)(nil).SendMessage), arg0)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddActiveFlows mocks base method.
func (m *MockDatabase) AddActiveFlows(arg0 []domains0.ActiveFlow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActiveFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActiveFlows indicates an expected call of AddActiveFlows.
func (mr *MockDatabaseMockRecorder) AddActiveFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActiveFlows", reflect.TypeOf((*MockDatabase)(nil).AddActiveFlows), arg0)
}

// AddHosts mocks base method.
func (m *MockDatabase) AddHosts(arg0 []host.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHosts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHosts indicates an expected call of AddHosts.
func (mr *MockDatabaseMockRecorder) AddHosts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHosts", reflect.TypeOf((*MockDatabase)(nil).AddHosts), arg0)
}

// GetClients mocks base method.
func (m *MockDatabase) GetClients() ([]domains0.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients")
	ret0, _ := ret[0].([]domains0.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockDatabaseMockRecorder) GetClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockDatabase)(nil).GetClients))
}

// GetFlowByKey mocks base method.
func (m *MockDatabase) GetFlowByKey(key string) (domains0.ActiveFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowByKey", key)
	ret0, _ := ret[0].(domains0.ActiveFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowByKey indicates an expected call of GetFlowByKey.
func (mr *MockDatabaseMockRecorder) GetFlowByKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowByKey", reflect.TypeOf((*MockDatabase)(nil).GetFlowByKey), key)
}

// GetHostByIp mocks base method.
func (m *MockDatabase) GetHostByIp(arg0 string) (host.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByIp", arg0)
	ret0, _ := ret[0].(host.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByIp indicates an expected call of GetHostByIp.
func (mr *MockDatabaseMockRecorder) GetHostByIp(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByIp", reflect.TypeOf((*MockDatabase)(nil).GetHostByIp), arg0)
}

// GetServerByAttr mocks base method.
func (m *MockDatabase) GetServerByAttr(attr string) (domains0.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerByAttr", attr)
	ret0, _ := ret[0].(domains0.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerByAttr indicates an expected call of GetServerByAttr.
func (mr *MockDatabaseMockRecorder) GetServerByAttr(attr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerByAttr", reflect.TypeOf((*MockDatabase)(nil).GetServerByAttr), attr)
}

// GetServers mocks base method.
func (m *MockDatabase) GetServers() ([]domains0.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers")
	ret0, _ := ret[0].([]domains0.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServers indicates an expected call of GetServers.
func (mr *MockDatabaseMockRecorder) GetServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockDatabase)(nil).GetServers))
}
