// Code generated by MockGen. DO NOT EDIT.
// Source: app/traffic/domains/traffic.go

// Package mock_domains is a generated GoMock package.
package mock_domains

import (
	reflect "reflect"

	domains "github.com/PaoGRodrigues/tfi-backend/app/traffic/domains"
	gomock "github.com/golang/mock/gomock"
)

// MockTrafficUseCase is a mock of TrafficUseCase interface.
type MockTrafficUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficUseCaseMockRecorder
}

// MockTrafficUseCaseMockRecorder is the mock recorder for MockTrafficUseCase.
type MockTrafficUseCaseMockRecorder struct {
	mock *MockTrafficUseCase
}

// NewMockTrafficUseCase creates a new mock instance.
func NewMockTrafficUseCase(ctrl *gomock.Controller) *MockTrafficUseCase {
	mock := &MockTrafficUseCase{ctrl: ctrl}
	mock.recorder = &MockTrafficUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficUseCase) EXPECT() *MockTrafficUseCaseMockRecorder {
	return m.recorder
}

// GetActiveFlows mocks base method.
func (m *MockTrafficUseCase) GetActiveFlows() []domains.ActiveFlow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveFlows")
	ret0, _ := ret[0].([]domains.ActiveFlow)
	return ret0
}

// GetActiveFlows indicates an expected call of GetActiveFlows.
func (mr *MockTrafficUseCaseMockRecorder) GetActiveFlows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveFlows", reflect.TypeOf((*MockTrafficUseCase)(nil).GetActiveFlows))
}

// GetAllActiveTraffic mocks base method.
func (m *MockTrafficUseCase) GetAllActiveTraffic() ([]domains.ActiveFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveTraffic")
	ret0, _ := ret[0].([]domains.ActiveFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveTraffic indicates an expected call of GetAllActiveTraffic.
func (mr *MockTrafficUseCaseMockRecorder) GetAllActiveTraffic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveTraffic", reflect.TypeOf((*MockTrafficUseCase)(nil).GetAllActiveTraffic))
}

// MockTrafficActiveFlowsSearcher is a mock of TrafficActiveFlowsSearcher interface.
type MockTrafficActiveFlowsSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficActiveFlowsSearcherMockRecorder
}

// MockTrafficActiveFlowsSearcherMockRecorder is the mock recorder for MockTrafficActiveFlowsSearcher.
type MockTrafficActiveFlowsSearcherMockRecorder struct {
	mock *MockTrafficActiveFlowsSearcher
}

// NewMockTrafficActiveFlowsSearcher creates a new mock instance.
func NewMockTrafficActiveFlowsSearcher(ctrl *gomock.Controller) *MockTrafficActiveFlowsSearcher {
	mock := &MockTrafficActiveFlowsSearcher{ctrl: ctrl}
	mock.recorder = &MockTrafficActiveFlowsSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficActiveFlowsSearcher) EXPECT() *MockTrafficActiveFlowsSearcherMockRecorder {
	return m.recorder
}

// GetBytesPerDestination mocks base method.
func (m *MockTrafficActiveFlowsSearcher) GetBytesPerDestination() ([]domains.BytesPerDestination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytesPerDestination")
	ret0, _ := ret[0].([]domains.BytesPerDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytesPerDestination indicates an expected call of GetBytesPerDestination.
func (mr *MockTrafficActiveFlowsSearcherMockRecorder) GetBytesPerDestination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesPerDestination", reflect.TypeOf((*MockTrafficActiveFlowsSearcher)(nil).GetBytesPerDestination))
}

// MockActiveFlowsStorage is a mock of ActiveFlowsStorage interface.
type MockActiveFlowsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockActiveFlowsStorageMockRecorder
}

// MockActiveFlowsStorageMockRecorder is the mock recorder for MockActiveFlowsStorage.
type MockActiveFlowsStorageMockRecorder struct {
	mock *MockActiveFlowsStorage
}

// NewMockActiveFlowsStorage creates a new mock instance.
func NewMockActiveFlowsStorage(ctrl *gomock.Controller) *MockActiveFlowsStorage {
	mock := &MockActiveFlowsStorage{ctrl: ctrl}
	mock.recorder = &MockActiveFlowsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveFlowsStorage) EXPECT() *MockActiveFlowsStorageMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockActiveFlowsStorage) Store(arg0 []domains.ActiveFlow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockActiveFlowsStorageMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockActiveFlowsStorage)(nil).Store), arg0)
}

// MockTrafficRepoClient is a mock of TrafficRepoClient interface.
type MockTrafficRepoClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficRepoClientMockRecorder
}

// MockTrafficRepoClientMockRecorder is the mock recorder for MockTrafficRepoClient.
type MockTrafficRepoClientMockRecorder struct {
	mock *MockTrafficRepoClient
}

// NewMockTrafficRepoClient creates a new mock instance.
func NewMockTrafficRepoClient(ctrl *gomock.Controller) *MockTrafficRepoClient {
	mock := &MockTrafficRepoClient{ctrl: ctrl}
	mock.recorder = &MockTrafficRepoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficRepoClient) EXPECT() *MockTrafficRepoClientMockRecorder {
	return m.recorder
}

// GetAllActiveTraffic mocks base method.
func (m *MockTrafficRepoClient) GetAllActiveTraffic() ([]domains.ActiveFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveTraffic")
	ret0, _ := ret[0].([]domains.ActiveFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveTraffic indicates an expected call of GetAllActiveTraffic.
func (mr *MockTrafficRepoClientMockRecorder) GetAllActiveTraffic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveTraffic", reflect.TypeOf((*MockTrafficRepoClient)(nil).GetAllActiveTraffic))
}

// MockTrafficRepoStore is a mock of TrafficRepoStore interface.
type MockTrafficRepoStore struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficRepoStoreMockRecorder
}

// MockTrafficRepoStoreMockRecorder is the mock recorder for MockTrafficRepoStore.
type MockTrafficRepoStoreMockRecorder struct {
	mock *MockTrafficRepoStore
}

// NewMockTrafficRepoStore creates a new mock instance.
func NewMockTrafficRepoStore(ctrl *gomock.Controller) *MockTrafficRepoStore {
	mock := &MockTrafficRepoStore{ctrl: ctrl}
	mock.recorder = &MockTrafficRepoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficRepoStore) EXPECT() *MockTrafficRepoStoreMockRecorder {
	return m.recorder
}

// StoreActiveFlows mocks base method.
func (m *MockTrafficRepoStore) StoreActiveFlows(arg0 []domains.ActiveFlow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreActiveFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreActiveFlows indicates an expected call of StoreActiveFlows.
func (mr *MockTrafficRepoStoreMockRecorder) StoreActiveFlows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreActiveFlows", reflect.TypeOf((*MockTrafficRepoStore)(nil).StoreActiveFlows), arg0)
}
