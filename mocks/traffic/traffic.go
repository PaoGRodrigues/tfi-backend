// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/traffic/model_temp.go
//
// Generated by this command:
//
//	mockgen -destination mocks/traffic/traffic.go -source=app/domain/traffic/model_temp.go TrafficRepository,TrafficBytesParser,TrafficService
//

// Package mock_traffic is a generated GoMock package.
package mock_traffic

import (
	reflect "reflect"

	traffic "github.com/PaoGRodrigues/tfi-backend/app/domain/traffic"
	gomock "go.uber.org/mock/gomock"
)

// MockTrafficBytesParser is a mock of TrafficBytesParser interface.
type MockTrafficBytesParser struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficBytesParserMockRecorder
	isgomock struct{}
}

// MockTrafficBytesParserMockRecorder is the mock recorder for MockTrafficBytesParser.
type MockTrafficBytesParserMockRecorder struct {
	mock *MockTrafficBytesParser
}

// NewMockTrafficBytesParser creates a new mock instance.
func NewMockTrafficBytesParser(ctrl *gomock.Controller) *MockTrafficBytesParser {
	mock := &MockTrafficBytesParser{ctrl: ctrl}
	mock.recorder = &MockTrafficBytesParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficBytesParser) EXPECT() *MockTrafficBytesParserMockRecorder {
	return m.recorder
}

// GetBytesPerCountry mocks base method.
func (m *MockTrafficBytesParser) GetBytesPerCountry() ([]traffic.BytesPerCountry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytesPerCountry")
	ret0, _ := ret[0].([]traffic.BytesPerCountry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytesPerCountry indicates an expected call of GetBytesPerCountry.
func (mr *MockTrafficBytesParserMockRecorder) GetBytesPerCountry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesPerCountry", reflect.TypeOf((*MockTrafficBytesParser)(nil).GetBytesPerCountry))
}
