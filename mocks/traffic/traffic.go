// Code generated by MockGen. DO NOT EDIT.
// Source: app/traffic/domains/traffic.go

// Package mock_domains is a generated GoMock package.
package mock_domains

import (
	reflect "reflect"

	domains "github.com/PaoGRodrigues/tfi-backend/app/traffic/domains"
	gomock "github.com/golang/mock/gomock"
)

// MockTrafficUseCase is a mock of TrafficUseCase interface.
type MockTrafficUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficUseCaseMockRecorder
}

// MockTrafficUseCaseMockRecorder is the mock recorder for MockTrafficUseCase.
type MockTrafficUseCaseMockRecorder struct {
	mock *MockTrafficUseCase
}

// NewMockTrafficUseCase creates a new mock instance.
func NewMockTrafficUseCase(ctrl *gomock.Controller) *MockTrafficUseCase {
	mock := &MockTrafficUseCase{ctrl: ctrl}
	mock.recorder = &MockTrafficUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficUseCase) EXPECT() *MockTrafficUseCaseMockRecorder {
	return m.recorder
}

// GetAllActiveTraffic mocks base method.
func (m *MockTrafficUseCase) GetAllActiveTraffic() ([]domains.Traffic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveTraffic")
	ret0, _ := ret[0].([]domains.Traffic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveTraffic indicates an expected call of GetAllActiveTraffic.
func (mr *MockTrafficUseCaseMockRecorder) GetAllActiveTraffic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveTraffic", reflect.TypeOf((*MockTrafficUseCase)(nil).GetAllActiveTraffic))
}

// MockTrafficRepository is a mock of TrafficRepository interface.
type MockTrafficRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficRepositoryMockRecorder
}

// MockTrafficRepositoryMockRecorder is the mock recorder for MockTrafficRepository.
type MockTrafficRepositoryMockRecorder struct {
	mock *MockTrafficRepository
}

// NewMockTrafficRepository creates a new mock instance.
func NewMockTrafficRepository(ctrl *gomock.Controller) *MockTrafficRepository {
	mock := &MockTrafficRepository{ctrl: ctrl}
	mock.recorder = &MockTrafficRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficRepository) EXPECT() *MockTrafficRepositoryMockRecorder {
	return m.recorder
}

// GetAllActiveTraffic mocks base method.
func (m *MockTrafficRepository) GetAllActiveTraffic() ([]domains.Traffic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveTraffic")
	ret0, _ := ret[0].([]domains.Traffic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveTraffic indicates an expected call of GetAllActiveTraffic.
func (mr *MockTrafficRepositoryMockRecorder) GetAllActiveTraffic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveTraffic", reflect.TypeOf((*MockTrafficRepository)(nil).GetAllActiveTraffic))
}
