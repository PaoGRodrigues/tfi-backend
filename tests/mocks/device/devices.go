// Code generated by MockGen. DO NOT EDIT.
// Source: app/device/domains/device.go

// Package mock_domains is a generated GoMock package.
package mock_domains

import (
	reflect "reflect"

	domains "github.com/PaoGRodrigues/tfi-backend/app/device/domains"
	gomock "github.com/golang/mock/gomock"
)

// MockDeviceUseCase is a mock of DeviceUseCase interface.
type MockDeviceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceUseCaseMockRecorder
}

// MockDeviceUseCaseMockRecorder is the mock recorder for MockDeviceUseCase.
type MockDeviceUseCaseMockRecorder struct {
	mock *MockDeviceUseCase
}

// NewMockDeviceUseCase creates a new mock instance.
func NewMockDeviceUseCase(ctrl *gomock.Controller) *MockDeviceUseCase {
	mock := &MockDeviceUseCase{ctrl: ctrl}
	mock.recorder = &MockDeviceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceUseCase) EXPECT() *MockDeviceUseCaseMockRecorder {
	return m.recorder
}

// GetAllDevices mocks base method.
func (m *MockDeviceUseCase) GetAllDevices() ([]domains.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDevices")
	ret0, _ := ret[0].([]domains.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDevices indicates an expected call of GetAllDevices.
func (mr *MockDeviceUseCaseMockRecorder) GetAllDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDevices", reflect.TypeOf((*MockDeviceUseCase)(nil).GetAllDevices))
}

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockDeviceRepository) GetAll() ([]domains.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domains.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDeviceRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDeviceRepository)(nil).GetAll))
}
